// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards Billboard[] @relation("StoreToBillboard")
  category   Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  color      Color[]     @relation("StoreToColor")
  product    Product[]   @relation("StoreToProduct")
  order      Order[]     @relation("StoreToOrder")
}

model Billboard {
  id        String   @id @default(uuid())
  storeId   String
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store    Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  category Category[] @relation("BillboardToCategory")

  @@index([storeId])
}

model Category {
  id          String   @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard Billboard @relation("BillboardToCategory", fields: [billboardId], references: [id])
  product   Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String   @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product[]

  store Store @relation("StoreToSize", fields: [storeId], references: [id])

  @@index([storeId])
}

model Color {
  id        String   @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product[]

  store Store @relation("StoreToColor", fields: [storeId], references: [id])

  @@index([storeId])
}

model Product {
  id         String   @id @default(uuid())
  storeId    String
  categoryId String
  name       String
  price      Decimal
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  sizeId     String
  colorId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  image      Image[]
  orderItems OrderItem[]

  store    Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size     Size     @relation(fields: [sizeId], references: [id])
  color    Color    @relation(fields: [colorId], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id          String   @id @default(uuid())
  productId   String
  url         String
  createdTime DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id        String   @id @default(uuid())
  storeId   String
  isPaid    Boolean  @default(false)
  phone     String   @default("")
  address   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]

  store Store @relation("StoreToOrder", fields: [storeId], references: [id])

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
